/// <summary>
///   VPMOVSXBW ymm, m128
/// The native signature does not exist. We provide this additional overload for completeness.
/// </summary>
Avx2.ConvertToVector256Int16(sbyte* address)

/// <summary>
///   VPMOVZXBW ymm, m128
/// The native signature does not exist. We provide this additional overload for completeness.
/// </summary>
Avx2.ConvertToVector256Int16(byte* address)

/// <summary>
///   VPMOVSXBD ymm, m64
/// The native signature does not exist. We provide this additional overload for completeness.
/// </summary>
Avx2.ConvertToVector256Int32(sbyte* address)

/// <summary>
///   VPMOVZXBD ymm, m64
/// The native signature does not exist. We provide this additional overload for completeness.
/// </summary>
Avx2.ConvertToVector256Int32(byte* address)

/// <summary>
///   VPMOVSXWD ymm, m128
/// The native signature does not exist. We provide this additional overload for completeness.
/// </summary>
Avx2.ConvertToVector256Int32(short* address)

/// <summary>
///   VPMOVZXWD ymm, m128
/// The native signature does not exist. We provide this additional overload for completeness.
/// </summary>
Avx2.ConvertToVector256Int32(ushort* address)

/// <summary>
///   VPMOVSXBQ ymm, m32
/// The native signature does not exist. We provide this additional overload for completeness.
/// </summary>
Avx2.ConvertToVector256Int64(sbyte* address)

/// <summary>
///   VPMOVZXBQ ymm, m32
/// The native signature does not exist. We provide this additional overload for completeness.
/// </summary>
Avx2.ConvertToVector256Int64(byte* address)

/// <summary>
///   VPMOVSXWQ ymm, m64
/// The native signature does not exist. We provide this additional overload for completeness.
/// </summary>
Avx2.ConvertToVector256Int64(short* address)

/// <summary>
///   VPMOVZXWQ ymm, m64
/// The native signature does not exist. We provide this additional overload for completeness.
/// </summary>
Avx2.ConvertToVector256Int64(ushort* address)

/// <summary>
///   VPMOVSXDQ ymm, m128
/// The native signature does not exist. We provide this additional overload for completeness.
/// </summary>
Avx2.ConvertToVector256Int64(int* address)

/// <summary>
///   VPMOVZXDQ ymm, m128
/// The native signature does not exist. We provide this additional overload for completeness.
/// </summary>
Avx2.ConvertToVector256Int64(uint* address)

Sse3.LoadDquVector128(byte* address)

Sse3.LoadDquVector128(short* address)

Sse3.LoadDquVector128(ushort* address)

Sse3.LoadDquVector128(int* address)

Sse3.LoadDquVector128(uint* address)

Sse3.LoadDquVector128(long* address)

Sse3.LoadDquVector128(ulong* address)


/// <summary>
///   PMOVSXBW xmm, m64
/// The native signature does not exist. We provide this additional overload for completeness.
/// </summary>
Sse41.ConvertToVector128Int16(sbyte* address)

/// <summary>
///   PMOVZXBW xmm, m64
/// The native signature does not exist. We provide this additional overload for completeness.
/// </summary>
Sse41.ConvertToVector128Int16(byte* address)

/// <summary>
///   PMOVSXBD xmm, m32
/// The native signature does not exist. We provide this additional overload for completeness.
/// </summary>
Sse41.ConvertToVector128Int32(sbyte* address)

/// <summary>
///   PMOVZXBD xmm, m32
/// The native signature does not exist. We provide this additional overload for completeness.
/// </summary>
Sse41.ConvertToVector128Int32(byte* address)

/// <summary>
///   PMOVSXWD xmm, m64
/// The native signature does not exist. We provide this additional overload for completeness.
/// </summary>
Sse41.ConvertToVector128Int32(short* address)

/// <summary>
///   PMOVZXWD xmm, m64
/// The native signature does not exist. We provide this additional overload for completeness.
/// </summary>
Sse41.ConvertToVector128Int32(ushort* address)

/// <summary>
///   PMOVSXBQ xmm, m16
/// The native signature does not exist. We provide this additional overload for completeness.
/// </summary>
Sse41.ConvertToVector128Int64(sbyte* address)

/// <summary>
///   PMOVZXBQ xmm, m16
/// The native signature does not exist. We provide this additional overload for completeness.
/// </summary>
Sse41.ConvertToVector128Int64(byte* address)

/// <summary>
///   PMOVSXWQ xmm, m32
/// The native signature does not exist. We provide this additional overload for completeness.
/// </summary>
Sse41.ConvertToVector128Int64(short* address)

/// <summary>
///   PMOVZXWQ xmm, m32
/// The native signature does not exist. We provide this additional overload for completeness.
/// </summary>
Sse41.ConvertToVector128Int64(ushort* address)

/// <summary>
///   PMOVSXDQ xmm, m64
/// The native signature does not exist. We provide this additional overload for completeness.
/// </summary>
Sse41.ConvertToVector128Int64(int* address)

/// <summary>
///   PMOVZXDQ xmm, m64
/// The native signature does not exist. We provide this additional overload for completeness.
/// </summary>
Sse41.ConvertToVector128Int64(uint* address)

Sse41.TestC(Vector128<byte> left, Vector128<byte> right)

Sse41.TestC(Vector128<short> left, Vector128<short> right)

Sse41.TestC(Vector128<ushort> left, Vector128<ushort> right)

Sse41.TestC(Vector128<int> left, Vector128<int> right)

Sse41.TestC(Vector128<uint> left, Vector128<uint> right)

Sse41.TestC(Vector128<long> left, Vector128<long> right)

Sse41.TestC(Vector128<ulong> left, Vector128<ulong> right)

Sse41.TestNotZAndNotC(Vector128<byte> left, Vector128<byte> right)

Sse41.TestNotZAndNotC(Vector128<short> left, Vector128<short> right)

Sse41.TestNotZAndNotC(Vector128<ushort> left, Vector128<ushort> right)

Sse41.TestNotZAndNotC(Vector128<int> left, Vector128<int> right)

Sse41.TestNotZAndNotC(Vector128<uint> left, Vector128<uint> right)

Sse41.TestNotZAndNotC(Vector128<long> left, Vector128<long> right)

Sse41.TestNotZAndNotC(Vector128<ulong> left, Vector128<ulong> right)

Sse41.TestZ(Vector128<byte> left, Vector128<byte> right)

Sse41.TestZ(Vector128<short> left, Vector128<short> right)

Sse41.TestZ(Vector128<ushort> left, Vector128<ushort> right)

Sse41.TestZ(Vector128<int> left, Vector128<int> right)

Sse41.TestZ(Vector128<uint> left, Vector128<uint> right)

Sse41.TestZ(Vector128<long> left, Vector128<long> right)

Sse41.TestZ(Vector128<ulong> left, Vector128<ulong> right)